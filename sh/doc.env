Title: Rationale document for a $HOME/.env script.
Author: J. Greg Davidson
Copyright (c) 1996 Virtual Infinity Systems (VIS).
You may freely use, modify and redistribute this document if you retain all
attached copyrights and credits.

The problem of correctly and nicely setting up environment variables
when logging on to a Unix or similar (GNU Linux, BSD, etc.) account
has become more difficult as the number of ways to login has increased
and as the number of separately maintained collections of interesting
software has increased.  I will share my solution to these problems
and the script $HOME/.env which implements it.  As this script is
small I do not bother to Copyleft it; choosing instead to allow free
redistribution and modification as long as credits are retained.

It is not uncommon for a single user to sometimes login to their
account using a tty interface, othertimes through xdm (The X Display
Manager) and still other times through dtlogin (part of the Common
Desktop Environment); all depending on what machine they are using to
reach and/or serve their account.  Thus, arranging for one's environment
variables to be correctly set regardless of which way one logs in is
now quite diverse.

The solution I have adopted is to have a single script, $HOME/.env,
which is responsible for setting up the environment.  It is sourced by
my .profile, .xsession and .dtprofile scripts (using a dot command),
and by also sourced by remote rsh shells (which is a separate
problem).

Using a separate .env script solves the first problem brought on by
the diversity of ways we might login.  The second problem is how,
within that script, to make sure that all of the interesting software
distributions kept online are reflected in one's PATH, MANPATH,
LIBPATH, etc. variables.  This problem is dependent on the system
administrator following a consistent approach in choice of
directories.  At VIS we have evolved a simple approach which meets our
needs well and also makes it possible to have a simple .env script
adapt to changes in what software distributions are online.

All public software distributions relevant to users are kept (using mount
points and symbolic links) under the directory /sw/<subsystem> where
<subsystem> is a name chosen to represent that particular
distribution.  As examples, some of ours are:

X		gnu		maxima	mh		misc.bar
misc.vis	postgres	prolog.unsw		scheme.2c
scheme.scm	sml		t			tex

Under each <subsystem> directory are the familiar subdirectories bin,
lib, man, include, etc., along with subsystem specific directories.
Since we have multiple binary architectures on our network we
segregate binary executables in directories named bin.`arch`,
architecture specific library files in directories lib.`arch`, etc.,
assuming the presence of the command arch to generate a unique name
for each binary architecture.  For traditional reasons we leave
non-binary executables (e.g. scripts) in bin [sic], portable library
files under lib, etc.

Users are encouraged to use a similar arrangement in their own
accounts, starting out with $HOME/sw/misc/bin for their scripts, and
then adding more directories as their needs diversify.

All of this makes it easy for the .env script to generate the desired
path with the code (assuming BASH):

    ARCH=bin.`arch`	# Directory for architecture dependent programs
    PROG=bin		# Directory for architecture independent programs
    for d in $HOME/sw /sw ; do
	for dir in $d/*/{$ARCH,$PROG} ; do
	   dir_in $dir $P || P=$P:$dir
	done
    done
    export PATH=$P

dir_in helps weed out broken links and avoids adding components which
are already present:

    #dir_in Directory PathList - Directory isn't one or is already on PathList
    dir_in() { [ ! -d $1 ] || expr ":$2:" : ".*:$1:" >/dev/null; }

Since the scripts which source .env normally do so using the Bourne
shell, a slightly slower version of .env can be created which eschews
the {alternatives,in,braces} feature of BASH:

    word_sort() { for word ; do echo $word ; done | sort; }

    for d in $HOME/sw /sw ; do
	for dir in `word_sort $d/*/$ARCH $d/*/$PROG`; do
	   dir_in $dir $P || P=$P:$dir
	done
    done

Finally, in an environment in which the interesting software
distributions need to be brought in from many hosts, any of which may
be offline at various times, this scheme can be generalized with one
more layer, storing software under /sw/<volume>/<subsystem>, where
<volume> would most often either be the name of a host, a disk device
or a disk partition, depending on which was most convenient.  This
greatly reduces the number of mount points required to stitch things
together, and allows soft mounts to be used.  In the .env script this
becomes:

    for d in $HOME/sw /sw/* ; do	# note extra /*
	for dir in `word_sort $d/*/$ARCH $d/*/$PROG`; do
	   dir_in $dir $P || P=$P:$dir
	done
    done
